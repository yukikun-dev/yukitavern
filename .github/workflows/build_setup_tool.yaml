name: Rust Build and Release
on: push
jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os:
                    - ubuntu-latest
                    - windows-latest
                    - macos-latest
                rust:
                    - stable
        defaults:
            run:
                working-directory: setup
        steps:
            - uses: actions/checkout@v2
            - name: Install dependencies (Ubuntu)
              if: matrix.os == 'ubuntu-latest'
              run: sudo apt-get update && sudo apt-get install -y libatk1.0-dev libgtk-3-dev build-essential pkg-config

            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: ${{ matrix.rust }}
                  override: true
            - name: Build
              run: cargo build --release --verbose
            - name: List build artifacts
              run: ls target/release/
            - name: Upload artifact (Linux & macOS)
              if: matrix.os != 'windows-latest'
              uses: actions/upload-artifact@v2
              with:
                  name: setup-${{ matrix.os }}
                  path: setup/target/release/setup
            - name: Upload artifact (Windows)
              if: matrix.os == 'windows-latest'
              uses: actions/upload-artifact@v2
              with:
                  name: setup-${{ matrix.os }}.exe
                  path: setup/target/release/setup.exe
    release:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v2
              with:
                  path: artifacts
            - name: Generate Release Name
              id: gen_release_name
              run: |
                  # Example of generating a random number
                  echo "RELEASE_NAME=$(date +%s)" >> $GITHUB_ENV
                  # Or use the commit SHA
                  # echo "RELEASE_NAME=${GITHUB_SHA}" >> $GITHUB_ENV

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ env.RELEASE_NAME }}
                  release_name: Release ${{ env.RELEASE_NAME }}
              env:
                  GITHUB_TOKEN: ${{ secrets.TOKEN }}

            - name: Upload Release Asset (Windows)
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./artifacts
                  asset_name: setup-windows-latest.exe
                  asset_content_type: application/octet-stream
              env:
                  GITHUB_TOKEN: ${{ secrets.TOKEN }}

            - name: Upload Release Asset (macOS)
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./artifacts
                  asset_name: setup-macos-latest
                  asset_content_type: application/octet-stream
              env:
                  GITHUB_TOKEN: ${{ secrets.TOKEN }}

            - name: Upload Release Asset (Ubuntu)
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./artifacts
                  asset_name: setup-ubuntu-latest
                  asset_content_type: application/octet-stream
              env:
                  GITHUB_TOKEN: ${{ secrets.TOKEN }}
